#!/bin/bash
#     Difroc - A standalone shell tester for standalone executables
#     Copyright (C) 2024 Daniel starr
#     Mail: daniel32@duck.com
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU Affero General Public License as
#     published by the Free Software Foundation, either version 3 of the
#     License, or (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU Affero General Public License for more details.
#
#     You should have received a copy of the GNU Affero General Public License
#     along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Safety measures
set -e
set -o pipefail

usage() {
  echo "Usage: $0 [OPTION] cmd [CMDOPTS]"
  echo "difroc runs cmd against every input file in dir and compares output"
  echo "  useful for testing standalone programs"
  echo "DIFROC is NOT SANITIZED. DO NOT USE WITH UNTRUSTED INPUT"
  echo "Options:"
  echo "  -d  (dir) [DIR]             directory of test files"
  echo "          defaults to \"./tests/\""
  echo "  -i  (inext) [INEXT]          input file extension"
  echo "          defaults to \".in\""
  echo "  -I  (install)               installs difrocq to /usr/local/bin"
  echo "  -U  (uninstall)              removes difroc from /usr/local/bin"
  echo "  -f  (force)                 force run even if overwrites will occur"
  echo "  -r  (runext) [RUNEXT]        run file extension"
  echo "          default: \".run\""
  echo "  -o  (outext) [OUTEXT]       output (test expected) file extension"
  echo "          default: \".out\""
  echo "  -c  (cleanup)                removes run files afterward"
  echo "  -q  (quiet)                 only outputs which files mismatch"
  echo "  -a  (args-input)             passes file contents as an argument"
  echo "                                  catted to args, no stdin"
  echo "  -g  (grep)                  greps run output for expected output"
  echo
  echo "Example: difroc -c -d ./tests/example/ cat"
}

install() {
  file_name="${0/$(dirname $0)\//}" # Gets file name
  target_location="/usr/local/bin/$file_name"

  echo "Copying $file_name to $target_location"

  cp -n "$file_name" "$target_location"
  echo "Setting executable perms for $target_location"
  chmod +x "$target_location"
  echo "Done install"
  exit 0
  #cp $0 /usr/
}
uninstall() {
  target_location="/usr/local/bin/${0/$(dirname $0)\//}"
  echo "Removing $target_location" 

  if [ ! -f $target_location ]; then
    echo "difroc not found at $target_location. Could not uninstall"
    exit 1
  fi
  rm -i "$target_location"
  echo "Done uninstall"
  exit 0
  # 
  #cp $0 /usr/
}
# Default args
dir_test="./tests/"
in_ext=".in"
force=false
run_ext=".run"
out_ext=".out"
clean_up=false
quiet=false
args_input=false
grep_out=false

options_passed=false

while getopts "d:i:IUfr:o:cquag" opt; do
  options_passed=true
  case $opt in
    d)
      dir_test="$OPTARG"
      ;;
    i)
      in_ext="$OPTARG"
      ;;
    I)
      install
      ;;
    U)
      uninstall
      ;;
    f)
      force=true
      ;;
    r)
      run_ext="$OPTARG"
      ;;
    o)
      out_ext="$OPTARG"
      ;;
    c)
      clean_up=true
      ;;
    q)
      quiet=true
      ;;
    a)
      args_input=true
      ;;
    g)  
      grep_out=true
      ;;

    \?)
      echo "Option is not DIFROC (Invalid option): -$OPTARG"
      usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument"
      usage
      exit 1
      ;;
  esac
done

command=
shift $((OPTIND-1))

#TODO: check if .run will overwrite a file, and warn, unless $force

if [ options_passed ]; then
  if [ $# -eq 0 ]; then
    echo "Error: command argument is required."
    usage
    exit 1
  else
    if ! command -v $1 &> /dev/null; then
      echo "Error: command \"$1\" not found"
      exit 1
    fi
    command=$1
    shift
  fi
else
  usage
  exit 0
fi

orig_cmdopts=()
while [[ "$#" -gt 0 ]]; do
  orig_cmdopts+=("$1")
  shift
done

# echo "base options: $orig_cmdopts"
# echo main loop

for file in "$dir_test"*"$in_ext"; do
  if [ $quiet = false ]; then
    echo reading $file
  fi
  if [ ! -f "$file" ]; then
    echo "attempted break"
    break 2
  fi
  base_name="${file/$in_ext/}"
  run_name="${base_name}${run_ext}"
  expected_name="${base_name}${out_ext}"
  # echo $expected_name
  if [ -e $run_name ] && [ $force = false ]; then
    echo file "$run_name" exists! preventing overwrite.
    echo use --force if you really want to overwrite!
    exit 1
  fi
  # cmdopts=("${orig_cmdopts[@]}")
  # echo "$args_input"
  # echo "$cmdopts"
  # run the command
  if [ $args_input = false ]; then 
    ("$command" "${orig_cmdopts[@]}" < "$file" > "$run_name")
  else
    # echo "regular loop"
    ("$command" "${orig_cmdopts[@]}$(cat $file)" > "$run_name")
  fi
  
  if [ $? -ne 0 ]; then
    echo "cmd failed"
  fi

  # echo post cmd
  # echo $clean_up
  if [ $grep_out = false ]; then 
    diff_res=$(diff "$run_name" "$expected_name" || true)
    if [ -n "$diff_res" ]; then
      if ! $quiet; then
        echo =======================
        echo "Mismatch with $file: "
        echo "$diff_res"
      else
        echo "$file"
      fi
    fi
  else 
    grep_res=$(grep $(cat $expected_name) < "$run_name" || true)
    if [ -z "$grep_res" ]; then
      if $quiet; then
        echo "$file"
      else
        echo =======================
        echo "No matches found $file: "
        echo "$grep_res"
      fi
    fi
  fi
  if [ $clean_up = true ]; then
    rm -f "$run_name"
  fi

  # echo end
done
# for file in "$test_dir"/*.in; do
